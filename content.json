{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://c89757.gitee.io/colinstar","root":"/colinstar/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2021-12-16T13:28:00.710Z","updated":"2021-12-16T13:28:00.710Z","comments":false,"path":"/404.html","permalink":"http://c89757.gitee.io/colinstar/404.html","excerpt":"","text":""},{"title":"书单","date":"2021-12-16T13:28:00.712Z","updated":"2021-12-16T13:28:00.712Z","comments":false,"path":"books/index.html","permalink":"http://c89757.gitee.io/colinstar/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-12-16T13:28:00.713Z","updated":"2021-12-16T13:28:00.713Z","comments":false,"path":"categories/index.html","permalink":"http://c89757.gitee.io/colinstar/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-12-16T13:28:00.714Z","updated":"2021-12-16T13:28:00.714Z","comments":false,"path":"repository/index.html","permalink":"http://c89757.gitee.io/colinstar/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-12-16T13:28:00.715Z","updated":"2021-12-16T13:28:00.715Z","comments":false,"path":"tags/index.html","permalink":"http://c89757.gitee.io/colinstar/tags/index.html","excerpt":"","text":""},{"title":"关于","date":"2021-12-16T13:28:00.712Z","updated":"2021-12-16T13:28:00.712Z","comments":false,"path":"about/index.html","permalink":"http://c89757.gitee.io/colinstar/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"友情链接","date":"2021-12-16T13:28:00.713Z","updated":"2021-12-16T13:28:00.713Z","comments":true,"path":"links/index.html","permalink":"http://c89757.gitee.io/colinstar/links/index.html","excerpt":"","text":""}],"posts":[{"title":"关于count(*)","slug":"关于count()","date":"2021-12-22T12:09:37.000Z","updated":"2021-12-22T12:52:47.613Z","comments":true,"path":"2021/12/22/关于count()/","link":"","permalink":"http://c89757.gitee.io/colinstar/2021/12/22/%E5%85%B3%E4%BA%8Ecount()/","excerpt":"","text":"count(*)的不同实现方式 在 msyql 引擎中，count（*）有不同的实现方式 MyISAM引擎把一个表的总行数存在了磁盘上,因此执行count(*)的时候会直接返回这个数，效率很高 而InnoDB引擎就麻烦了，它执行count(*)的时候，需要把数据一行一行地从引擎里面读出来，然后累计计数 当然，这里说的是不加where条件的count(*)，如果加了条件，MyISAM表也不能返回这么快的。 为什么InnoDB不像MyISAM一样，也把数字存起来呢？ ​ 因为即使在同一个时刻的多个子查询，由于多版本并发控制（MVCC）的原因，而InnoDB表 应该返回多少行 也是不确定的。 比如现在某表中有1000条数据 会话A去执行select(*) 会话B开启事务，新增一条数据，再执行select * 会话A和会话B在同一时刻执行，那么他们返回的总行数是不一样的，A返回1000，而B返回1001 这和InnoDB的事务有关系，可重复读是它默认的隔离级别，在代码上就是通过多版本并发控制，也就是MVCC来实现的。每一行记录都要判断自己是否对这个会话可见，因此对于count(*)请求来说，InnoDB会把数据一行一行的读出来依次判断，可见的行才能够计算“基于这个查询”的表的总行数 ​ MySQL在执行 count(*)操作的时候还是做了优化的。 InnoDB 是索引组织表，主键索引树的叶子节点是数据，而普通索引树的叶子节点是 主键值。所以，普通索引树比主键索引树小很多。对于 count(*) 这样的操作，遍历哪个索引树 得到的结果逻辑上都是一样的。因此，MySQL 优化器会找到最小的那棵树来遍历。在保证逻辑 正确的前提下，尽量减少扫描的数据量，是数据库系统设计的通用法则之一 解决方案 如果一个页面需要经常查询显示某表的总数，应该如何去做呢？ 我们应该自己去计数 用缓存系统保存计数​ 可以用Redis去记录这个表的总行数。每插入一行Redis计数就加1，每删除一行Redis计数就减1。 可能存在的问题： 1、Redis可能会丢失数据，如果我们刚在表里插入了一行数据，Redis中的值也进行了自增，然后Redis宕机了，还没来得及进行持久化，导致数据的丢失； （我们可以在Redis宕机后，手动select(*)查询总行数写回Redis) 2、Redis和MySql存在分布式事务问题； 比如某个场景下，我们需要查询显示总数，并且还要显示最近操作的100条记录。那我们就需要先从Redis里面取出计数，再去表里取数据记录 可能存在的问题，查到的100行里面没有新增的数据，但Redis的计数已经加1 另一种是，查到的100行有新增的数，但是Redis的计数还没加1 产生的原因就是，无法保证提交数据库事务的同时写入Redis， 在数据库保存计数​ 用一张表去记录总数，可以避免上述问题，因此事务的可见性，我们插入数据和修改表中记录的行数都是在方法执行完后统一提交的事务，事务还未提交时，对其他线程是不可见的 从并发系统性能的角度看，应该先插数据表，还是先更新计数表呢？ 更新计数表会涉及到行锁的竞争，先插入再更新能最大程度的减少了事务之间的锁等待，提高并发度（事务开启后，更新操作放到最后，减少锁等待时间的影响） 不同count的用法count(*)、count(id)、count(字段)、count(1)的用法的性能，有哪些差别呢。 基于InnoDB引擎 count（）是一个聚合函数，对于返回的结果集，一行一行的判断，如果count函数的参数不是null,就会累计值加1，否则不加。 所以count(*),count(id),count(字段),count(1)都返回满足条件的结果集的总行数；而count(字段），则表示返回满足条件的数据行里，参数“字段”不为null的总个数 对于count(id)来说。InnoDB引擎会遍历整张表，把每一行的id值都取出来，返回给server层，server层拿到id后，判断是不可能为空的，就按行累加 对于count(1)来说。InnoDB引擎遍历整张表，但是不取值。server层对于返回的每一行，放一个数字“1”进去，判断是不可能为空的，按行累加 count(*)执行的要比count(id)快，因为从引擎返回id会涉及到解析数据行，以及拷贝字段值的操作 对于count(字段)来说。 如果这个字段是定义为not null的话，一行行的从记录里面读取出这个字段，判断不能为null,按行累加； 如果这个字段允许为空，那么执行的时候，判断到有可能是null，还要把值取出来再判断一下，不是null才累加 对于count(*)来说。并不会把全部字段取出来，而是专门做了优化，不取值，count(*)肯定不是null,按行累加 按照效率排序的话，count(字段) &lt; count(id) &lt; count(1) ≈ count(*)","categories":[{"name":"mysql","slug":"mysql","permalink":"http://c89757.gitee.io/colinstar/categories/mysql/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://c89757.gitee.io/colinstar/tags/mysql/"}]},{"title":"Sychronized关键字-monitorenter与monitorexit","slug":"Sychronized关键字-monitorenter与monitorexit","date":"2021-12-17T11:19:25.000Z","updated":"2021-12-17T11:47:41.031Z","comments":true,"path":"2021/12/17/Sychronized关键字-monitorenter与monitorexit/","link":"","permalink":"http://c89757.gitee.io/colinstar/2021/12/17/Sychronized%E5%85%B3%E9%94%AE%E5%AD%97-monitorenter%E4%B8%8Emonitorexit/","excerpt":"","text":"每个对象都有一个Monitor与之关联，当Monitor被持有后，它将处于锁定状态。Synchronized在JVM里的实现都是 基于进入和退出Monitor对象来实现方法同步和代码块同步，都可以通过成对的MonitorEnter和MonitorExit指令来实现。 12345public void method() &#123; synchronized(this) &#123; System.out.println(&quot;hello world&quot;); &#125; &#125; 经过javap解析后 1234567891011121314151617181920212223public void method(); Code: 0: aload_0 1: dup 2: astore_1 3: monitorenter 4: getstatic #2 // Field java/lang/System.out:Ljava/io/PrintStream; 7: ldc #3 // String hello world 9: invokevirtual #4 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 12: aload_1 13: monitorexit 14: goto 22 17: astore_2 18: aload_1 19: monitorexit 20: aload_2 21: athrow 22: return Exception table: from to target type 4 14 17 any 17 20 17 any 此处会发现有一个monitorenter，却有两个monitorexit；这是JVM的补偿机制，保证你的同步代码块中出现异常，能正常释放锁 如字节码行号4-13可能会出现异常，则会走17进行异常处理，在此处进行锁的释放","categories":[{"name":"juc","slug":"juc","permalink":"http://c89757.gitee.io/colinstar/categories/juc/"}],"tags":[{"name":"JUC","slug":"JUC","permalink":"http://c89757.gitee.io/colinstar/tags/JUC/"},{"name":"多线程","slug":"多线程","permalink":"http://c89757.gitee.io/colinstar/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}]},{"title":"MySql性能调优","slug":"MySql性能调优","date":"2021-12-16T15:08:30.000Z","updated":"2021-12-17T11:47:30.089Z","comments":true,"path":"2021/12/16/MySql性能调优/","link":"","permalink":"http://c89757.gitee.io/colinstar/2021/12/16/MySql%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/","excerpt":"","text":"啥也没有，只是为了样式展示","categories":[{"name":"mysql","slug":"mysql","permalink":"http://c89757.gitee.io/colinstar/categories/mysql/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://c89757.gitee.io/colinstar/tags/mysql/"}]},{"title":"gitee+hexo搭建个人博客","slug":"gitee+hexo搭建个人博客","date":"2021-12-16T12:42:22.000Z","updated":"2021-12-17T11:49:04.429Z","comments":true,"path":"2021/12/16/gitee+hexo搭建个人博客/","link":"","permalink":"http://c89757.gitee.io/colinstar/2021/12/16/gitee+hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"概述事前准备： 先创建一个仓库，同时在仓库根目录下创建index.html (gitee官网这样说的,没试过缺少这个文件会怎样) 安装Hexo所需环境 node.js git 自行进行下载与安装 安装1234567891011# 安装hexonpm install -g hexo# 创建文件夹,用来存储你博客内容hexo init test# cd到创建的目录,执行npm install# 开启hexo服务hexo s 访问http://localhost:4000；没有问题的话就会显示他的默认页面 修改配置关联git仓库，在你创建的目录下找到 config.yml文件（例如此处我的是test/_config.yml） 打开添加如下配置 1234deploy: type: &#x27;git&#x27; repository: https://gitee.com/xxx/xxxx # 你的仓库地址 branch: master # 你的仓库分支 生成静态页面 1hexo g #或者 hexo generate 123456# 此时若出现如下报错：ERROR Local hexo not found in ~/blogERROR Try runing: &#x27;npm install hexo --save&#x27;# 则执行命令：npm install hexo --save 将生成的页面提交到仓库 1hexo d #或者hexo deploy 若执行命令hexo deploy报错：无法连接git或找不到git，则执行如下命令来安装hexo-deployer-git： 1npm install hexo-deployer-git --save 发布文章进入到你创建的“text”目录，新建文章，执行 1hexo new &quot;blog&quot; 此时在test/source/_posts下，会新建一个名为“blog.md”的文件，利用相关markdown编辑器就能编写你的博客啦!(我这里用的typore) 123hexo g # 生成静态页面hexo d # 部署到gitee hexo有许多主题，默认生成的主题都是landscape，你也可以去主题官网寻找自己喜欢的主题 例如主题pure 1234567891011git clone https://github.com/cofess/hexo-theme-pure.git themes/pure#修改test目录下_config.yml里theme的名称,将landscape修改为pure即可 hexo clean#清除缓存文件 (db.json) 和静态文件 (public)hexo g#生成缓存和静态文件hexo d #重新部署到服务器","categories":[{"name":"others","slug":"others","permalink":"http://c89757.gitee.io/colinstar/categories/others/"}],"tags":[{"name":"others","slug":"others","permalink":"http://c89757.gitee.io/colinstar/tags/others/"}]}],"categories":[{"name":"mysql","slug":"mysql","permalink":"http://c89757.gitee.io/colinstar/categories/mysql/"},{"name":"juc","slug":"juc","permalink":"http://c89757.gitee.io/colinstar/categories/juc/"},{"name":"others","slug":"others","permalink":"http://c89757.gitee.io/colinstar/categories/others/"}],"tags":[{"name":"mysql","slug":"mysql","permalink":"http://c89757.gitee.io/colinstar/tags/mysql/"},{"name":"JUC","slug":"JUC","permalink":"http://c89757.gitee.io/colinstar/tags/JUC/"},{"name":"多线程","slug":"多线程","permalink":"http://c89757.gitee.io/colinstar/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"},{"name":"others","slug":"others","permalink":"http://c89757.gitee.io/colinstar/tags/others/"}]}